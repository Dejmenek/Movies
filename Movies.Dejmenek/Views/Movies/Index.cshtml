@using Movies.Dejmenek.Enums
@model MovieGenreViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-controller="Movies" asp-action="Index" method="get">
    <p>
        <select asp-for="MovieGenre" asp-items="Model.Genres">
            <option value="">All</option>
        </select>

        <select asp-for="MovieRating" asp-items="Model.Ratings">
            <option value="">All</option>
        </select>

        <label>Sort by:</label>
        <select asp-for="SortOption" asp-items="Html.GetEnumSelectList<SortOptions>()">
        </select>

        <label>Title: <input type="text" name="SearchString" /></label>
        <input type="submit" value="Filter" />
    </p>
    <a asp-action="Index" class="btn btn-default">Clear filters</a>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].ImageUri)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].Rating)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Movies!) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                <img src="@item.ImageUri" class="img-thumbnail" style="width: 100px; height: 100px;" />
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.Movies.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Movies.HasNextPage ? "disabled" : "";
}
<ul class="pagination">
    <li class="page-item @prevDisabled">
        <a asp-action="Index"
           asp-route-movieGenre="@Model.MovieGenre"
           asp-route-movieRating="@Model.MovieRating"
           asp-route-sortOption="@((int)Model.SortOption)"
           asp-route-pageNumber="@(Model.Movies.PageIndex - 1)"
           class="page-link">
            Previous
        </a>
    </li>

    @for (int pageIndex = 1; pageIndex <= Model.Movies.TotalPages; pageIndex++)
    {
        <li class="page-item @(pageIndex == Model.Movies.PageIndex ? "active" : "")">
            <a asp-action="Index"
               asp-route-movieGenre="@Model.MovieGenre"
               asp-route-movieRating="@Model.MovieRating"
               asp-route-sortOption="@((int)Model.SortOption)"
               asp-route-pageNumber="@(pageIndex)"
               class="page-link">
                @pageIndex
            </a>
        </li>
    }

    <li class="page-item @nextDisabled">
        <a asp-action="Index"
           asp-route-movieGenre="@Model.MovieGenre"
           asp-route-movieRating="@Model.MovieRating"
           asp-route-sortOption="@((int)Model.SortOption)"
           asp-route-pageNumber="@(Model.Movies.PageIndex + 1)"
           class="page-link">
            Next
        </a>
    </li>
</ul>

